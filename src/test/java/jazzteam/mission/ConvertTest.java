package jazzteam.mission;


import org.junit.Assert;

public class ConvertTest {
    @org.junit.Test
    public void convertNumberToString() throws Exception {
        Convert conv = new Convert();
        String[][] actualAndExpected = {{
                "0-1",
                "0",
                "-1597534862761943",
                "1597534862761943",
                "text",
                " ",
                "000000000001",
                "159753486276194315975348627619431597534862761943159753486276194315975348627619431597534862761943",
                "1597534862761943159753486276194315975348627619431597534862761943159753486276194315975348627619431597534862761943",
                "-0000000001597534862",
                "00000000001597534862",
                "01010159"},
                //эталонные значения соответственно
                {"Строка введена некорректно. Используйте только числа и символ \"-\" в начале строки.",
                "ноль ",
                "минус один квадриллион пятьсот девяносто семь триллионов пятьсот тридцать четыре миллиарда восемьсот шестьдесят два миллиона семьсот шестьдесят одна тысяча девятьсот сорок три ",
                "один квадриллион пятьсот девяносто семь триллионов пятьсот тридцать четыре миллиарда восемьсот шестьдесят два миллиона семьсот шестьдесят одна тысяча девятьсот сорок три ",
                "Строка введена некорректно. Используйте только числа и символ \"-\" в начале строки.",
                "Строка введена некорректно. Используйте только числа и символ \"-\" в начале строки.",
                "один ",
                "сто пятьдесят девять тригинтиллионов семьсот пятьдесят три новемвигинтиллиона четыреста восемьдесят шесть октовигинтиллионов двести семьдесят шесть септемвигинтиллионов сто девяносто четыре сексвигинтиллиона триста пятнадцать квинвигинтиллионов девятьсот семьдесят пять кватторвигинтиллионов триста сорок восемь тревигинтиллионов шестьсот двадцать семь дуовигинтиллионов шестьсот девятнадцать анвигинтиллионов четыреста тридцать один вигинтиллион пятьсот девяносто семь новемдециллионов пятьсот тридцать четыре октодециллиона восемьсот шестьдесят два септемдециллиона семьсот шестьдесят один сексдециллион девятьсот сорок три квиндециллиона сто пятьдесят девять кваттордециллионов семьсот пятьдесят три тредециллиона четыреста восемьдесят шесть дуодециллионов двести семьдесят шесть андециллионов сто девяносто четыре дециллиона триста пятнадцать нониллионов девятьсот семьдесят пять октиллионов триста сорок восемь септиллионов шестьсот двадцать семь секстиллионов шестьсот девятнадцать квинтиллионов четыреста тридцать один квадриллион пятьсот девяносто семь триллионов пятьсот тридцать четыре миллиарда восемьсот шестьдесят два миллиона семьсот шестьдесят одна тысяча девятьсот сорок три ",
                "Введен слишком длинный аргумент. Максимальная длинна строки 99 символов.",
                "минус один миллиард пятьсот девяносто семь миллионов пятьсот тридцать четыре тысячи восемьсот шестьдесят два ",
                "один миллиард пятьсот девяносто семь миллионов пятьсот тридцать четыре тысячи восемьсот шестьдесят два ",
                "один миллион десять тысяч сто пятьдесят девять "}};
        for(int i = 0; i < 12; ++i) {
            try {
                String actual = conv.convertNumberToString(actualAndExpected[0][i]);
                String expected = actualAndExpected[1][i];
                Assert.assertEquals("Найдено несовпадение!" + i, expected, actual);
            }
            catch (Exception ex){
                Assert.assertEquals("Ошибка, данные исключения не совпали!" + i, actualAndExpected[1][i], ex.getMessage());
            }
        }
    }
}